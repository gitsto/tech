<project basedir=".">

  <!-- Initializes the environment paths and properties -->
  <target name="init">
    <!-- Initializes the directory structure properties -->
    <property name="src.dir" location="."/>
    <property name="obj.dir" location="../bin"/>
    <property name="lib.dir" location="../libs"/>
    <property name="run.dir" location="../run"/>
    <property name="conf.dir" location="../conf"/>
  	
    <!-- Project classpath needed for execution -->
    <path id="project.class.path">
      <pathelement path="${java.class.path}/"/>
      <fileset dir="${lib.dir}">
         <include name="*.jar"/>
      </fileset>
      <pathelement path="${run.dir}"/>
    </path>
    <property name="project.class.path" refid="project.class.path"/>
  </target>

  <!-- Cleans samples - deletes generated files -->
  <target name="clean" depends="init" description="--> Cleans run directory">
     <delete dir="${run.dir}"/>
  </target>

  <!-- Cleans run directory -->
  <target name="reset" depends="init" description="--> Cleans run directory">
    <delete dir="${run.dir}"/>
  </target>

  <!-- Initializes the centralized configuration -->
  <target name="simple_init" depends="init">
    <mkdir dir="${run.dir}"/>
    <copy file="${conf.dir}/a3config.dtd" todir="${run.dir}"/>
    <copy file="${conf.dir}/a3debug.cfg" todir="${run.dir}"/>
    <copy file="${conf.dir}/jndi.properties" tofile="${run.dir}/jndi.properties"/>
    <copy file="${conf.dir}/a3servers.xml" tofile="${run.dir}/a3servers.xml" overwrite="true"/>
  </target>

  <!-- Runs the Admin GUI -->
  <target name="admin_gui" depends="init" description="--> Starts an admin GUI client">
    <java classname="org.objectweb.joram.client.tools.admin.AdminTool" failonerror="no" fork="yes" dir="${run.dir}">
      <classpath path="${project.class.path}"/>
    </java>
  </target>

  <!-- Starts a server -->
  <target name="server" depends="init">
    <java classname="fr.dyade.aaa.agent.AgentServer" failonerror="no" fork="yes" dir="${run.dir}">
      <classpath path="${project.class.path}"/>
      <jvmarg line="-Dcom.sun.management.jmxremote -DMXServer=com.scalagent.jmx.JMXServer"/>
      <arg line="${sid} ./s${sid}"/>
    </java>
  </target>

  <!-- Start a server in NullTransaction mode -->
  <target name="single_server" depends="simple_init" description="--> Starts a single server in non-persistent mode">
    <antcall target="server">
      <param name="sid" value="0"/>
    </antcall>
  </target>

  <!-- Setup the classic configuration -->
  <target name="classic_admin" depends="init" description="--> Runs a classic administration (for a centralized architecture)">
    <java classname="classic.ClassicAdmin" failonerror="no" fork="yes" dir="${run.dir}">
      <classpath path="${project.class.path}"/>
    </java>
  </target>

  <!-- Runs the classic sender client -->
  <target name="sender" depends="init" description="--> Starts a Sender client">
    <java classname="classic.Sender" failonerror="no" fork="yes" dir="${run.dir}">
      <classpath path="${project.class.path}"/>
    </java>
  </target>

  <!-- Runs the classic receiver client -->
  <target name="receiver" depends="init" description="--> Starts a Receiver client">
    <java classname="classic.Receiver" failonerror="no" fork="yes" dir="${run.dir}">
      <classpath path="${project.class.path}"/>
    </java>
  </target>

  <!-- Runs the classic subscriber client -->
  <target name="subscriber" depends="init" description="--> Starts a Subscriber client">
    <java classname="classic.Subscriber" failonerror="no" fork="yes" dir="${run.dir}">
      <classpath path="${project.class.path}"/>
    </java>
  </target>

  <!-- Runs the classic publisher client -->
  <target name="publisher" depends="init" description="--> Starts a Publisher client">
    <java classname="classic.Publisher" failonerror="no" fork="yes" dir="${run.dir}">
      <classpath path="${project.class.path}"/>
    </java>
  </target>

  <!-- Runs the classic consumer client -->
  <target name="consumer" depends="init" description="--> Starts a Consumer client">
    <java classname="classic.Consumer" failonerror="no" fork="yes" dir="${run.dir}">
      <classpath path="${project.class.path}"/>
    </java>
  </target>

  <!-- Runs the classic producer client -->
  <target name="producer" depends="init" description="--> Starts a Producer client">
    <java classname="classic.Producer" failonerror="no" fork="yes" dir="${run.dir}">
      <classpath path="${project.class.path}"/>
    </java>
  </target>	
</project>
