package philosophe.thread2.passif.base;import java.util.concurrent.ExecutorService;import java.util.concurrent.Executors;import java.util.concurrent.ThreadFactory;import philosophe.api.IGestBaguettes;class LanceurPhiloPassif {	public static void main(String[] args) {		int nbPhil = 5;		int nbServ = 3;		if (args.length > 0) {			nbPhil = Integer.parseInt(args[0], 10);			nbServ = Integer.parseInt(args[1], 10);		}   				ExecutorService serveurs = Executors.newFixedThreadPool(nbServ, new ThreadFactory() {			public Thread newThread(Runnable arg0) {				Thread t = new Thread(arg0);				t.setDaemon(true);				return t;			}		});				IGestBaguettes arbitre=new GestBagPassif(nbPhil);       		PhiloPassif[] phil;		phil = new PhiloPassif[nbPhil];		for (int i = 0; i < nbPhil; i++)			phil[i] = new PhiloPassif(i, serveurs, arbitre, i, (i + 1) % nbPhil);		for (int i = 0; i < nbPhil; i++) phil[i].start();	}}